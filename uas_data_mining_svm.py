# -*- coding: utf-8 -*-
"""UAS DATA MINING SVM

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BZYckx49CpSjm2kSshKhFLl97iXmEXoI
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

from sklearn.svm import SVC, LinearSVC
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix

match_df = pd.read_csv("international_matches.csv")
match_df.head()

match_df.info()

match_df.describe()

"""# New Section"""

match_df.isna().sum()

match_df.keys()

match_df.values

match_df.shape

print('\nTop 10 team ranking:\n' )
match_df[:10]

print("Dimensions: ",match_df.shape, "\n")

"""# New Section"""

print(match_df.groupby('home_team_result').size())

print("Draw :", match_df['home_team_result'].value_counts()[2])
print("Win :", match_df['home_team_result'].value_counts()[0])
print("Lose :", match_df['home_team_result'].value_counts()[1])

X = match_df.iloc[:, 13:]
y = match_df.iloc[:, 0]

# find and remove correlated features
def correlation(data, threshold):
    col_corr = set()  # Set of all the names of correlated columns
    corr_matrix = data.corr()
    for i in range(len(corr_matrix.columns)):
        for j in range(i):
            if abs(corr_matrix.iloc[i, j]) > threshold: # we are interested in absolute coeff value
                colname = corr_matrix.columns[i]  # getting the name of column
                col_corr.add(colname)
    return col_corr

# Setting threshold value if greater than 0.7 means multicollinearity between independent features is high and we have to remove that features:
correlation(match_df, 0.7)

match_df = match_df.replace({"IR Iran": "Iran", "Korea Republic" : "South Korea"})

match_df['rank_difference'] = match_df['home_team_fifa_rank'] - match_df['away_team_fifa_rank']
match_df['average_rank'] = (match_df['home_team_fifa_rank'] + match_df['away_team_fifa_rank'])/2
match_df['point_difference'] = match_df['home_team_total_fifa_points'] - match_df['away_team_total_fifa_points']
match_df['is_stake'] = match_df['tournament'] != 'Friendly'
match_df['is_worldcup'] = 'FIFA World Cup' in match_df['tournament']

match_df['score_difference'] = match_df['home_team_score'] - match_df['away_team_score'] # Note that this feature is not used in training
match_df['is_won'] = match_df['score_difference'] > 0 # Take draw as lost

X, y = match_df.loc[:,['average_rank', 'rank_difference', 'point_difference', 'is_stake', 'is_worldcup']], match_df['is_won']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

svc = SVC()
svc.fit(X_train, y_train)
svm_pred = svc.predict(X_test)
acc_svc = round(svc.score(X_test, y_test) * 100, 2)
acc_svc

wc_2022 = ['Qatar','Ecuador','Senegal','Netherland','England','Iran','USA','Wales','Argentina','Saudi Arabia','Mexico','Poland','France','Australia','Denmark']

goals_conceded_home, goals_scored_home, goals_conceded_away, goals_scored_away = [], [], [], []
total_goals_scored, total_goals_conceded = [], []
for team in wc_2022:
    gch = match_df[match_df['home_team']==team]['away_team_score'].sum()
    gsh = match_df[match_df['home_team']==team]['home_team_score'].sum()
    gca = match_df[match_df['away_team']==team]['home_team_score'].sum()
    gsa = match_df[match_df['away_team']==team]['away_team_score'].sum()
    
    
    tgc = np.add(gch,gca)
    tgs = np.add(gsh,gsa)
    
    goals_conceded_home.append(gch)
    goals_scored_home.append(gsh)
    goals_conceded_away.append(gca)
    goals_scored_away.append(gsa)
    
    total_goals_scored.append(tgs)
    total_goals_conceded.append(tgc)
    
goals = pd.DataFrame({'Team':wc_2022,'Scored goals home':goals_scored_home,'Scored goals away':goals_scored_away,'Conceded goals home':goals_conceded_home,'Conceded goals away':goals_conceded_away ,'Total scored goals':total_goals_scored,'Total conceded goals':total_goals_conceded})

goals['Goal difference'] = goals['Total scored goals'] - goals['Total conceded goals']
goals['Goal ratio'] = goals['Total scored goals']/ goals['Total conceded goals']

goals = goals.sort_values('Goal difference', ascending = False).reset_index(drop = True)
goals.index += 1
goals

plt.figure(figsize=(11,7), dpi=90)
ax = sns.barplot(data=goals[:10], x='Team', y='Goal difference')
plt.xlabel('TEAM')
plt.ylabel('GOAL DIFFERENCE')
plt.title('TOP 10 TEAMS BEST GOAL DIFFERENCE');

models = pd.DataFrame({
    'Model': ['Support Vector Machines'],
    'Score': [acc_svc]})
models.sort_values(by='Score', ascending=False)

import pickle
Pkl_Filename = "SVM.pkl"  

with open(Pkl_Filename, 'wb') as file:  
    pickle.dump(SVC, file)

#load back
with open(Pkl_Filename, 'rb') as file:  
    Pickled_SVM_Model = pickle.load(file)
Pickled_SVM_Model